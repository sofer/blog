---
layout: post
title: Javascript application frameworks
category: tech
standfirst: "So much choice. It's hard to know where to begin." 
---
Back in 2009, Avi Bryant said that "Django is obsolete (but so is everything else)":http://pyvideo.org/video/33/djangocon-2009--django-is-obsolete--but-so-is-eve (He also said the  "the same thing about Rails":http://www.confreaks.com/videos/359-gogaruco2010-rails-is-obsolete-but-so-s-everything-else in 2010).

His argument is that with the release by Google of Gmail in 2004 (which initially loads HTML and then it's JSON all the way), and then of the V8 javascript VM in 2008 (which made it easier to develop other applications in the same way), the old server-side MVC model died. In the future, web applications will be built like Gmail with essentially a single URL visible to the user and a backend that just sends structured data to the browser. As a consequence templates will die and so will controllers and the kind of routing model used by Rails.

Two or three years later and there is now an explosion of javascript application frameworks that are moving in this direction.

So, which one do I go for?

There is a "repository on Github":https://github.com/addyosmani/todomvc that includes implementations of a simple todo app in dozens of different Javascript frameworks (I count 35). TodoMVC now has around 3,000 followers, which is more than all but a couple of the frameworks it features.

Here is a shoddy and ill-informed summary of the implementations:

"AngularJS":http://addyosmani.github.com/todomvc/architecture-examples/angularjs/index.html#/. Very readable HTML source, consisting of normal HTML tags with _ng_ attributes, like _ng-show_, _ng-click_, _ng-model_ _ng-repeat_ and so on, and user-defined attributes (in this case, like _todo-blur_ and _todo-focus_), which together determine behaviour (in other words, they do the data binding). The javascript is divided up into different files under folders that include _controllers_, _directives_, _libs_ and _services_. I sort of prefer my javascript all in one place, but on larger projects this looks like it could keep things tidy. And the source of this application is very tidy indeed. Most of the application-specific code is all in _controllers/todoCtrl.js_ and there are only 40 or so lines of it. It's all pretty obvious where the behaviour in the HTML attributes comes from and the code is very readable. I quite like it, as do "some":http://net.tutsplus.com/tutorials/javascript-ajax/5-awesome-angularjs-features/ "other":http://sotomajor.org.ua/7-reasons-why-angularjs-rocks people. It has come out of Google.

"Backbone.js":http://addyosmani.github.com/todomvc/architecture-examples/backbone/index.html. There is less going on in the HTML source. It is not very clear what is going on in the background. The source contains separate template markup. The JavaScript is split up into several folders. Most of the code is in _views/app.js_ and _views/todos.js_ . It's readable code, but not as terse as AngularJS, nor is the connexion clear between the markup and the behaviour of the application. For  "Backbone.js + RequireJS":http://addyosmani.github.com/todomvc/dependency-examples/backbone_require/index.html the template fragments are moved out of the HTML markup and into separate template files.

"Ember.js":http://addyosmani.github.com/todomvc/architecture-examples/emberjs/index.html. There is a wonderful simplicity to the Ember application. Just one HTML page and one app.js file. The HTML content is made up almost entirely of _\{\{#view\}\}_ and _\{\{collection\}\}_ handlers with no embedded HTML markup at all (I expect Avi would approve). It is not quite as terse as AngularJS, but it is not far off. Very nice.

"Spine.js":http://addyosmani.github.com/todomvc/architecture-examples/spine/index.html. It's CoffeeScript. And very neat, too. _src/app.coffee_, _src/controllers/todos.coffee_ and _src/models/todo.coffee_ are all short and readable. And "some people prefer spine over angular":http://edwardhotchkiss.com/blog/2012/03/11/jekyll-live-search-with-angular.js/.

"Knockout (MVVM)":http://addyosmani.github.com/todomvc/architecture-examples/knockoutjs/index.html. Does data binding in the HTMl markup rather like AngularJS with _data-bind_ attributes. Also, like Ember.js, the source is all contained in a single file. But with function calls like _ko.bindingHandlers.hasfocus.init_ it gives the appearance of being a bit more low-level than some other frameworks, it least to a simple-minded amateur like me. On the other hand, someone recently commented that "it's quite similar to AngularJS and Ember, but feels more mature than either, and has great documentation.":http://news.ycombinator.com/item?id=4147035. It has come out of Microsoft.

Of the others, "Dojo":http://addyosmani.github.com/todomvc/architecture-examples/dojo/index.html possibly asks too much of the developer, 
"Closure":http://addyosmani.github.com/todomvc/architecture-examples/closure/index.html#/ looks like it requires a fair bit of development overhead, but as it is used for Gmail and other Google applications it is likely to be a good choice for _serious_ applications (nothing I am likely to build, then). "YUILibrary":http://addyosmani.github.com/todomvc/architecture-examples/yuilibrary/index.html is not terribly readable.
"Knockback.js":http://addyosmani.github.com/todomvc/architecture-examples/knockback/index.html might have made sense is I liked the Knockout way of doing things, already used Backbone.js and wanted to develop in CoffeeScript. "Agility.js":http://addyosmani.github.com/todomvc/architecture-examples/agilityjs/index.html looks simple and readable. "Google Web Toolkit":http://addyosmani.github.com/todomvc/architecture-examples/gwt/index.html is Java. forget it.
"jQuery":http://addyosmani.github.com/todomvc/architecture-examples/jquery/index.html on its own is actually not too complicated. It is still worth considering if I am not doing anything too fancy.

Finally, there are frameworks like "Meteor":http://todomvc.meteor.com/, for full-stack development on both the client and server sides. Similar frameworks include "Derby":http://www.derbyjs.com/, "SocketStream":http://www.socketstream.org/ and "Opa":http://opalang.org/. Built on top of Node.js, one or other of these frameworks is likely to be the future of Web development for real-time, collaborative applications.

For now, I am going to have a play with AngularJS and see how I get on.



